---
# _______________________________________________grafana
project_grafana_port: 3000
apt_repo_keys_to_add:
  - https://packages.grafana.com/gpg.key
  - https://repos.influxdata.com/influxdb.key
apt_repo_enable_apt_transport_https: yes
apt_repo_to_add:
  - "deb https://packages.grafana.com/oss/deb stable main"
  - "deb https://repos.influxdata.com/{{ ansible_distribution | lower }} {{ ansible_distribution_release }} stable"
redhat_repo:
  grafana:
    baseurl: https://packages.grafana.com/oss/rpm
    gpgkey: https://packages.grafana.com/gpg.key
    gpgcheck: yes
    enabled: yes

grafana_extra_packages: []
grafana_plugins:
  - name: agenty-flowcharting-panel
    state: present
  - name: fetzerch-sunandmoon-datasource
    state: present
os_grafana_flags:
  FreeBSD: |
    grafana_conf={{ grafana_conf_file }}
  OpenBSD: ""
  Debian: ""

os_grafana_package:
  FreeBSD: www/grafana7
  OpenBSD: "{{ __grafana_package }}"
  Debian: "{{ __grafana_package }}"
grafana_package: "{{ os_grafana_package[ansible_os_family] }}"
grafana_flags: "{{ os_grafana_flags[ansible_os_family] }}"
grafana_addr: 127.0.0.1
grafana_conf_file: "{{ grafana_conf_dir }}/config.ini"

grafana_config: |
  [paths]
  data = {{ grafana_db_dir }}
  logs = {{ grafana_log_dir }}
  plugins = {{ grafana_plugins_dir }}
  provisioning = {{ grafana_provisioning_dir }}
  [server]
  [database]
  log_queries =
  [session]
  [dataproxy]
  [analytics]
  [security]
  admin_user = {{ grafana_admin_user }}
  admin_password = {{ grafana_admin_password }}
  disable_gravatar = true
  [snapshots]
  [dashboards]
  [users]
  [auth]
  [auth.anonymous]
  [auth.github]
  [auth.google]
  [auth.generic_oauth]
  [auth.grafana_com]
  [auth.proxy]
  [auth.basic]
  [auth.ldap]
  [smtp]
  [emails]
  [log]
  [log.console]
  [log.file]
  [log.syslog]
  [alerting]
  [metrics]
  [metrics.graphite]
  [tracing.jaeger]
  [grafana_com]
  [external_image_storage]
  [external_image_storage.s3]
  [external_image_storage.webdav]
  [external_image_storage.gcs]
  [external_image_storage.azure_blob]
  [external_image_storage.local]

# _______________________________________________telgraf
telegraf_extra_packages:
  - net-snmp
telegraf_config: |
  [global_tags]
    database = "hosts"
  [agent]
    interval = "1m"
    round_interval = true
    metric_batch_size = 1000
    metric_buffer_limit = 10000
    collection_jitter = "0s"
    flush_interval = "10s"
    flush_jitter = "0s"
    precision = ""
    debug = false
    quiet = false
    logfile = "{{ telegraf_log_dir }}/telegraf.log"
    hostname = "{{ ansible_hostname }}"
    omit_hostname = false
  [[inputs.diskio]]
  [[inputs.mem]]
  [[inputs.processes]]
  [[inputs.cpu]]
    percpu = true
    totalcpu = true
    collect_cpu_time = false
    report_active = false
  [[inputs.mqtt_consumer]]
    servers = ["tcp://{{ project_mqtt_host }}:1883"]
    username = "{{ project_mqtt_user }}"
    password = "{{ project_mqtt_password }}"
    # esphome/lobby/sensor/ambient/sensor/humidity/state
    topics = [
      "esphome/+/+/+/sensor/+/influx"
    ]
    persistent_session = false
    qos = 1
    client_id = "telegraf"
    data_format = "influx"
    [inputs.mqtt_consumer.tags]
      database = "sensors"
  [[inputs.dns_query]]
    servers = ["a.dns.jp", "b.dns.jp", "c.dns.jp"]
    network = "udp"
    domains = ["jp"]
    record_type = "NS"
    port = 53
    timeout = 10
    [inputs.dns_query.tags]
      database = "network"
  [[inputs.dns_query]]
    servers = ["8.8.8.8", "180.178.124.12", "96.9.64.12"]
    network = "udp"
    domains = ["."]
    record_type = "NS"
    port = 53
    timeout = 10
    [inputs.dns_query.tags]
      database = "network"
  [[inputs.ping]]
    # XXX ICMP does not work in VirtualBox network
    urls = ["96.9.84.193", "8.8.8.8"]
    method = "exec"
    count = 10
    binary = "/sbin/ping"
    [inputs.ping.tags]
      database = "network"
  [[inputs.http_response]]
    urls = ["https://news1005.mcot.net/", "https://www.royaloffice.th/"]
    interval = "10m"
    [inputs.http_response.headers]
      User-Agent = "User-Agent: Mozilla/5.0 (X11; FreeBSD amd64; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.128 Safari/537.36"
    [inputs.http_response.tags]
      database = "network"

  [[inputs.snmp]]
    agents = [ "192.168.2.253" ]
    version = 3
    sec_name = "{{ project_snmp_v3['tplink']['sec_name'] }}"
    auth_protocol = "{{ project_snmp_v3['tplink']['auth_protocol'] }}"
    auth_password = "{{ project_snmp_v3['tplink']['auth_password'] }}"
    sec_level = "{{ project_snmp_v3['tplink']['sec_level'] }}"
    priv_protocol = "{{ project_snmp_v3['tplink']['priv_protocol'] }}"
    priv_password = "{{ project_snmp_v3['tplink']['priv_password'] }}"
    [inputs.snmp.tags]
      database = "network"
    [[inputs.snmp.field]]
      name = "hostname"
      oid = "RFC1213-MIB::sysName.0"
      is_tag = true
    [[inputs.snmp.field]]
      name = "uptime"
      oid = "RFC1213-MIB::sysUpTime.0"

    [[inputs.snmp.table]]
      name = "interface"
      inherit_tags = [ "hostname" ]
      oid = "IF-MIB::ifTable"
      [[inputs.snmp.table.field]]
        name = "ifDescr"
        oid = "IF-MIB::ifDescr"
        is_tag = true

    [[inputs.snmp.table]]
      name = "interface"
      inherit_tags = [ "hostname" ]
      oid = "IF-MIB::ifXTable"
      [[inputs.snmp.table.field]]
        name = "ifDescr"
        oid = "IF-MIB::ifDescr"
        is_tag = true

  [[outputs.influxdb]]
    urls = ["http://{{ project_influxdb_host }}:8086"]
    database = "sensors"
    username = "{{ project_telegraf_influxdb_user }}"
    password = "{{ project_telegraf_influxdb_password }}"
    skip_database_creation = true
    [outputs.influxdb.tagpass]
      database = ["sensors"]
  [[outputs.influxdb]]
    urls = ["http://{{ project_influxdb_host }}:8086"]
    database = "hosts"
    username = "{{ project_telegraf_influxdb_user }}"
    password = "{{ project_telegraf_influxdb_password }}"
    skip_database_creation = true
    [outputs.influxdb.tagpass]
      database = ["hosts"]
  [[outputs.influxdb]]
    urls = ["http://{{ project_influxdb_host }}:8086"]
    database = "network"
    username = "{{ project_telegraf_influxdb_user }}"
    password = "{{ project_telegraf_influxdb_password }}"
    skip_database_creation = true
    [outputs.influxdb.tagpass]
      database = ["network"]

# _______________________________________________nginx
os_project_www_root_dir:
  OpenBSD: /var/www/htdocs
  FreeBSD: /usr/local/www/nginx
  Debian: /var/www/html
  RedHat: /usr/share/nginx/html
project_www_root_dir: "{{ os_project_www_root_dir[ansible_os_family] }}"

nginx_config: |
  user {{ nginx_user }};
  worker_processes 1;
  error_log {{ nginx_error_log_file }};
  events {
    worker_connections 1024;
  }
  http {
    include {{ nginx_conf_dir }}/mime.types;
    access_log {{ nginx_access_log_file }};
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    gzip on;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript text/x-js;

    upstream influxdb {
      server {{ influxdb_bind_address }};
      keepalive 10;
    }

    upstream grafana {
      server localhost:{{ project_grafana_port }};
      keepalive 10;
    }

    server {
      listen {{ project_ingress_address }}:80;
      server_name {{ project_influx_service_fqdn }};
      root {{ project_www_root_dir }};
      location / {
        proxy_pass http://grafana/;
        proxy_redirect default;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_connect_timeout 5;
        proxy_send_timeout 10;
        proxy_read_timeout 20;
      }
      error_page 500 502 503 504 /50x.html;
      location = /50x.html {
      }
    }
  }

# _______________________________________________influxdb

influxdb_bind_address: "{{ project_ingress_address }}:8086"
influxdb_databases:
  - database_name: sensors
    state: present
  - database_name: hosts
    state: present
  - database_name: network
    state: present
  - database_name: hass
    state: present
influxdb_config: |
  reporting-disabled = true
  # this one is bind address for backup process
  bind-address = "127.0.0.1:8088"
  [meta]
    dir = "{{ influxdb_db_dir }}/meta"
  [data]
    dir = "{{ influxdb_db_dir }}/data"
    wal-dir = "{{ influxdb_db_dir }}/wal"
  [coordinator]
  [retention]
  [shard-precreation]
  [monitor]
  [http]
    auth-enabled = true
    bind-address = "{{ influxdb_bind_address }}"
    access-log-path = "{{ influxdb_log_dir }}/access.log"
  [ifql]
  [logging]
  [subscriber]
  [[graphite]]
  [[collectd]]
  [[opentsdb]]
  [[udp]]
  [tls]

# _______________________________________________monit
monit_config: |
  set daemon 10
    with start delay {{ project_monit_start_delay }}
  set httpd port 2812
    use address 127.0.0.1
    allow 127.0.0.1
  set logfile syslog facility log_daemon

monit_conf_extra_include_directories: []
os_ssh_rc_command:
  FreeBSD:
    start: /usr/sbin/service sshd start
    stop: /usr/sbin/service sshd stop
  OpenBSD:
    start: /usr/sbin/rcctl start sshd
    stop: /usr/sbin/rcctl stop sshd
  Debian:
    start: /usr/sbin/service ssh start
    stop: /usr/sbin/service ssh stop
  RedHat:
    start: /bin/systemctl start sshd
    stop: /bin/systemctl stop sshd
monit_scripts: []
monit_rc:
  sshd:
    state: present
    content: |
      check process sshd with pidfile /var/run/sshd.pid
        start program = "/usr/sbin/service sshd start"
        stop program = "/usr/sbin/service sshd stop"
        every 2 cycles
        if failed port 22 protocol ssh then restart
  nginx:
    state: present
    content: |
      check process nginx with pidfile /var/run/nginx.pid
      start program = "/usr/sbin/service nginx start"
      stop program = "/usr/sbin/service nginx stop"
      if failed host {{ project_ingress_address }} port 80 protocol http for 3 cycles then restart
  grafana:
    state: present
    content: |
      check process grafana matching grafana-server
      start program = "/usr/sbin/service grafana start"
      stop program = "/usr/sbin/service grafana stop"
      if failed host 127.0.0.1 port 3000 protocol http for 3 cycles then restart
  influxdb:
    state: present
    content: |
      check process influxdb matching influxd
      start program = "/usr/sbin/service influxdb start"
      stop program = "/usr/sbin/service influxdb stop"
      if failed host {{ influxdb_bind_address.split(":") | first }} port {{ influxdb_bind_address.split(":") | last }} protocol http request "/" status = 404 for 3 cycles then restart
